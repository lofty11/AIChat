/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 513.0, "minX": 0.0, "maxY": 7435.0, "series": [{"data": [[0.0, 3165.0], [0.1, 3196.0], [0.2, 3225.0], [0.3, 3234.0], [0.4, 3250.0], [0.5, 3251.0], [0.6, 3251.0], [0.7, 3255.0], [0.8, 3255.0], [0.9, 3256.0], [1.0, 3257.0], [1.1, 3257.0], [1.2, 3257.0], [1.3, 3257.0], [1.4, 3258.0], [1.5, 3260.0], [1.6, 3260.0], [1.7, 3260.0], [1.8, 3261.0], [1.9, 3261.0], [2.0, 3261.0], [2.1, 3262.0], [2.2, 3262.0], [2.3, 3262.0], [2.4, 3262.0], [2.5, 3263.0], [2.6, 3263.0], [2.7, 3263.0], [2.8, 3264.0], [2.9, 3264.0], [3.0, 3265.0], [3.1, 3265.0], [3.2, 3266.0], [3.3, 3272.0], [3.4, 3273.0], [3.5, 3273.0], [3.6, 3273.0], [3.7, 3274.0], [3.8, 3274.0], [3.9, 3274.0], [4.0, 3274.0], [4.1, 3275.0], [4.2, 3275.0], [4.3, 3276.0], [4.4, 3278.0], [4.5, 3278.0], [4.6, 3279.0], [4.7, 3280.0], [4.8, 3282.0], [4.9, 3282.0], [5.0, 3284.0], [5.1, 3291.0], [5.2, 3293.0], [5.3, 3293.0], [5.4, 3294.0], [5.5, 3294.0], [5.6, 3294.0], [5.7, 3295.0], [5.8, 3296.0], [5.9, 3297.0], [6.0, 3303.0], [6.1, 3305.0], [6.2, 3306.0], [6.3, 3307.0], [6.4, 3307.0], [6.5, 3308.0], [6.6, 3308.0], [6.7, 3309.0], [6.8, 3313.0], [6.9, 3314.0], [7.0, 3314.0], [7.1, 3317.0], [7.2, 3320.0], [7.3, 3321.0], [7.4, 3324.0], [7.5, 3327.0], [7.6, 3330.0], [7.7, 3330.0], [7.8, 3331.0], [7.9, 3332.0], [8.0, 3332.0], [8.1, 3333.0], [8.2, 3334.0], [8.3, 3336.0], [8.4, 3336.0], [8.5, 3337.0], [8.6, 3337.0], [8.7, 3339.0], [8.8, 3340.0], [8.9, 3340.0], [9.0, 3341.0], [9.1, 3342.0], [9.2, 3343.0], [9.3, 3344.0], [9.4, 3347.0], [9.5, 3349.0], [9.6, 3350.0], [9.7, 3351.0], [9.8, 3356.0], [9.9, 3361.0], [10.0, 3363.0], [10.1, 3365.0], [10.2, 3365.0], [10.3, 3366.0], [10.4, 3367.0], [10.5, 3368.0], [10.6, 3368.0], [10.7, 3369.0], [10.8, 3369.0], [10.9, 3369.0], [11.0, 3370.0], [11.1, 3371.0], [11.2, 3371.0], [11.3, 3372.0], [11.4, 3372.0], [11.5, 3373.0], [11.6, 3376.0], [11.7, 3377.0], [11.8, 3377.0], [11.9, 3377.0], [12.0, 3378.0], [12.1, 3378.0], [12.2, 3378.0], [12.3, 3378.0], [12.4, 3380.0], [12.5, 3380.0], [12.6, 3381.0], [12.7, 3381.0], [12.8, 3383.0], [12.9, 3384.0], [13.0, 3384.0], [13.1, 3385.0], [13.2, 3386.0], [13.3, 3388.0], [13.4, 3388.0], [13.5, 3389.0], [13.6, 3389.0], [13.7, 3390.0], [13.8, 3390.0], [13.9, 3390.0], [14.0, 3391.0], [14.1, 3393.0], [14.2, 3393.0], [14.3, 3393.0], [14.4, 3393.0], [14.5, 3393.0], [14.6, 3393.0], [14.7, 3394.0], [14.8, 3396.0], [14.9, 3397.0], [15.0, 3397.0], [15.1, 3397.0], [15.2, 3398.0], [15.3, 3398.0], [15.4, 3398.0], [15.5, 3401.0], [15.6, 3401.0], [15.7, 3402.0], [15.8, 3403.0], [15.9, 3403.0], [16.0, 3403.0], [16.1, 3404.0], [16.2, 3404.0], [16.3, 3406.0], [16.4, 3407.0], [16.5, 3407.0], [16.6, 3407.0], [16.7, 3409.0], [16.8, 3410.0], [16.9, 3410.0], [17.0, 3410.0], [17.1, 3410.0], [17.2, 3412.0], [17.3, 3414.0], [17.4, 3414.0], [17.5, 3414.0], [17.6, 3415.0], [17.7, 3417.0], [17.8, 3418.0], [17.9, 3419.0], [18.0, 3419.0], [18.1, 3420.0], [18.2, 3421.0], [18.3, 3421.0], [18.4, 3422.0], [18.5, 3424.0], [18.6, 3425.0], [18.7, 3426.0], [18.8, 3427.0], [18.9, 3427.0], [19.0, 3430.0], [19.1, 3435.0], [19.2, 3437.0], [19.3, 3438.0], [19.4, 3439.0], [19.5, 3441.0], [19.6, 3442.0], [19.7, 3443.0], [19.8, 3444.0], [19.9, 3448.0], [20.0, 3451.0], [20.1, 3451.0], [20.2, 3456.0], [20.3, 3457.0], [20.4, 3458.0], [20.5, 3461.0], [20.6, 3461.0], [20.7, 3461.0], [20.8, 3461.0], [20.9, 3461.0], [21.0, 3462.0], [21.1, 3462.0], [21.2, 3462.0], [21.3, 3462.0], [21.4, 3463.0], [21.5, 3463.0], [21.6, 3464.0], [21.7, 3464.0], [21.8, 3465.0], [21.9, 3465.0], [22.0, 3466.0], [22.1, 3466.0], [22.2, 3466.0], [22.3, 3466.0], [22.4, 3467.0], [22.5, 3467.0], [22.6, 3468.0], [22.7, 3468.0], [22.8, 3469.0], [22.9, 3469.0], [23.0, 3469.0], [23.1, 3469.0], [23.2, 3470.0], [23.3, 3470.0], [23.4, 3471.0], [23.5, 3472.0], [23.6, 3472.0], [23.7, 3473.0], [23.8, 3479.0], [23.9, 3481.0], [24.0, 3481.0], [24.1, 3483.0], [24.2, 3484.0], [24.3, 3484.0], [24.4, 3485.0], [24.5, 3486.0], [24.6, 3488.0], [24.7, 3488.0], [24.8, 3489.0], [24.9, 3489.0], [25.0, 3489.0], [25.1, 3490.0], [25.2, 3490.0], [25.3, 3490.0], [25.4, 3491.0], [25.5, 3491.0], [25.6, 3491.0], [25.7, 3491.0], [25.8, 3491.0], [25.9, 3491.0], [26.0, 3491.0], [26.1, 3492.0], [26.2, 3494.0], [26.3, 3494.0], [26.4, 3495.0], [26.5, 3495.0], [26.6, 3495.0], [26.7, 3495.0], [26.8, 3496.0], [26.9, 3496.0], [27.0, 3496.0], [27.1, 3496.0], [27.2, 3496.0], [27.3, 3497.0], [27.4, 3498.0], [27.5, 3498.0], [27.6, 3498.0], [27.7, 3498.0], [27.8, 3499.0], [27.9, 3500.0], [28.0, 3500.0], [28.1, 3500.0], [28.2, 3501.0], [28.3, 3501.0], [28.4, 3501.0], [28.5, 3501.0], [28.6, 3502.0], [28.7, 3502.0], [28.8, 3502.0], [28.9, 3502.0], [29.0, 3502.0], [29.1, 3502.0], [29.2, 3503.0], [29.3, 3503.0], [29.4, 3503.0], [29.5, 3503.0], [29.6, 3504.0], [29.7, 3504.0], [29.8, 3504.0], [29.9, 3505.0], [30.0, 3506.0], [30.1, 3506.0], [30.2, 3506.0], [30.3, 3506.0], [30.4, 3507.0], [30.5, 3507.0], [30.6, 3507.0], [30.7, 3508.0], [30.8, 3508.0], [30.9, 3508.0], [31.0, 3508.0], [31.1, 3509.0], [31.2, 3510.0], [31.3, 3510.0], [31.4, 3510.0], [31.5, 3510.0], [31.6, 3510.0], [31.7, 3510.0], [31.8, 3511.0], [31.9, 3511.0], [32.0, 3512.0], [32.1, 3512.0], [32.2, 3512.0], [32.3, 3512.0], [32.4, 3513.0], [32.5, 3513.0], [32.6, 3513.0], [32.7, 3514.0], [32.8, 3514.0], [32.9, 3514.0], [33.0, 3515.0], [33.1, 3515.0], [33.2, 3515.0], [33.3, 3516.0], [33.4, 3516.0], [33.5, 3516.0], [33.6, 3516.0], [33.7, 3517.0], [33.8, 3517.0], [33.9, 3517.0], [34.0, 3518.0], [34.1, 3518.0], [34.2, 3518.0], [34.3, 3518.0], [34.4, 3518.0], [34.5, 3518.0], [34.6, 3518.0], [34.7, 3518.0], [34.8, 3518.0], [34.9, 3518.0], [35.0, 3518.0], [35.1, 3519.0], [35.2, 3519.0], [35.3, 3519.0], [35.4, 3519.0], [35.5, 3519.0], [35.6, 3519.0], [35.7, 3519.0], [35.8, 3520.0], [35.9, 3520.0], [36.0, 3520.0], [36.1, 3520.0], [36.2, 3520.0], [36.3, 3520.0], [36.4, 3520.0], [36.5, 3521.0], [36.6, 3521.0], [36.7, 3521.0], [36.8, 3521.0], [36.9, 3521.0], [37.0, 3521.0], [37.1, 3521.0], [37.2, 3521.0], [37.3, 3522.0], [37.4, 3522.0], [37.5, 3522.0], [37.6, 3522.0], [37.7, 3523.0], [37.8, 3523.0], [37.9, 3523.0], [38.0, 3523.0], [38.1, 3523.0], [38.2, 3523.0], [38.3, 3523.0], [38.4, 3523.0], [38.5, 3523.0], [38.6, 3523.0], [38.7, 3523.0], [38.8, 3523.0], [38.9, 3524.0], [39.0, 3524.0], [39.1, 3525.0], [39.2, 3525.0], [39.3, 3525.0], [39.4, 3525.0], [39.5, 3525.0], [39.6, 3525.0], [39.7, 3525.0], [39.8, 3525.0], [39.9, 3526.0], [40.0, 3526.0], [40.1, 3526.0], [40.2, 3526.0], [40.3, 3526.0], [40.4, 3526.0], [40.5, 3526.0], [40.6, 3527.0], [40.7, 3527.0], [40.8, 3527.0], [40.9, 3527.0], [41.0, 3527.0], [41.1, 3527.0], [41.2, 3528.0], [41.3, 3528.0], [41.4, 3528.0], [41.5, 3528.0], [41.6, 3529.0], [41.7, 3530.0], [41.8, 3530.0], [41.9, 3530.0], [42.0, 3530.0], [42.1, 3530.0], [42.2, 3530.0], [42.3, 3530.0], [42.4, 3531.0], [42.5, 3531.0], [42.6, 3531.0], [42.7, 3531.0], [42.8, 3531.0], [42.9, 3531.0], [43.0, 3532.0], [43.1, 3532.0], [43.2, 3532.0], [43.3, 3532.0], [43.4, 3533.0], [43.5, 3534.0], [43.6, 3534.0], [43.7, 3535.0], [43.8, 3535.0], [43.9, 3536.0], [44.0, 3536.0], [44.1, 3536.0], [44.2, 3536.0], [44.3, 3537.0], [44.4, 3537.0], [44.5, 3538.0], [44.6, 3538.0], [44.7, 3538.0], [44.8, 3538.0], [44.9, 3539.0], [45.0, 3539.0], [45.1, 3539.0], [45.2, 3539.0], [45.3, 3539.0], [45.4, 3540.0], [45.5, 3540.0], [45.6, 3540.0], [45.7, 3541.0], [45.8, 3541.0], [45.9, 3541.0], [46.0, 3542.0], [46.1, 3542.0], [46.2, 3542.0], [46.3, 3542.0], [46.4, 3542.0], [46.5, 3543.0], [46.6, 3543.0], [46.7, 3543.0], [46.8, 3544.0], [46.9, 3545.0], [47.0, 3545.0], [47.1, 3545.0], [47.2, 3545.0], [47.3, 3545.0], [47.4, 3546.0], [47.5, 3546.0], [47.6, 3546.0], [47.7, 3546.0], [47.8, 3546.0], [47.9, 3546.0], [48.0, 3547.0], [48.1, 3547.0], [48.2, 3548.0], [48.3, 3549.0], [48.4, 3549.0], [48.5, 3549.0], [48.6, 3549.0], [48.7, 3549.0], [48.8, 3549.0], [48.9, 3549.0], [49.0, 3550.0], [49.1, 3550.0], [49.2, 3550.0], [49.3, 3550.0], [49.4, 3550.0], [49.5, 3550.0], [49.6, 3550.0], [49.7, 3551.0], [49.8, 3551.0], [49.9, 3551.0], [50.0, 3551.0], [50.1, 3552.0], [50.2, 3552.0], [50.3, 3552.0], [50.4, 3553.0], [50.5, 3553.0], [50.6, 3553.0], [50.7, 3553.0], [50.8, 3554.0], [50.9, 3554.0], [51.0, 3554.0], [51.1, 3554.0], [51.2, 3555.0], [51.3, 3556.0], [51.4, 3556.0], [51.5, 3556.0], [51.6, 3557.0], [51.7, 3557.0], [51.8, 3557.0], [51.9, 3557.0], [52.0, 3558.0], [52.1, 3558.0], [52.2, 3559.0], [52.3, 3559.0], [52.4, 3559.0], [52.5, 3560.0], [52.6, 3560.0], [52.7, 3560.0], [52.8, 3561.0], [52.9, 3561.0], [53.0, 3561.0], [53.1, 3561.0], [53.2, 3562.0], [53.3, 3562.0], [53.4, 3562.0], [53.5, 3562.0], [53.6, 3563.0], [53.7, 3563.0], [53.8, 3563.0], [53.9, 3564.0], [54.0, 3565.0], [54.1, 3565.0], [54.2, 3565.0], [54.3, 3565.0], [54.4, 3565.0], [54.5, 3565.0], [54.6, 3566.0], [54.7, 3566.0], [54.8, 3566.0], [54.9, 3566.0], [55.0, 3566.0], [55.1, 3566.0], [55.2, 3567.0], [55.3, 3568.0], [55.4, 3568.0], [55.5, 3569.0], [55.6, 3569.0], [55.7, 3569.0], [55.8, 3569.0], [55.9, 3570.0], [56.0, 3570.0], [56.1, 3570.0], [56.2, 3570.0], [56.3, 3570.0], [56.4, 3570.0], [56.5, 3570.0], [56.6, 3570.0], [56.7, 3571.0], [56.8, 3571.0], [56.9, 3571.0], [57.0, 3571.0], [57.1, 3572.0], [57.2, 3572.0], [57.3, 3572.0], [57.4, 3572.0], [57.5, 3572.0], [57.6, 3573.0], [57.7, 3573.0], [57.8, 3573.0], [57.9, 3574.0], [58.0, 3575.0], [58.1, 3575.0], [58.2, 3576.0], [58.3, 3576.0], [58.4, 3577.0], [58.5, 3577.0], [58.6, 3577.0], [58.7, 3577.0], [58.8, 3578.0], [58.9, 3578.0], [59.0, 3579.0], [59.1, 3580.0], [59.2, 3581.0], [59.3, 3581.0], [59.4, 3581.0], [59.5, 3582.0], [59.6, 3582.0], [59.7, 3583.0], [59.8, 3583.0], [59.9, 3584.0], [60.0, 3584.0], [60.1, 3586.0], [60.2, 3586.0], [60.3, 3588.0], [60.4, 3588.0], [60.5, 3588.0], [60.6, 3589.0], [60.7, 3589.0], [60.8, 3589.0], [60.9, 3591.0], [61.0, 3591.0], [61.1, 3591.0], [61.2, 3592.0], [61.3, 3593.0], [61.4, 3594.0], [61.5, 3594.0], [61.6, 3594.0], [61.7, 3595.0], [61.8, 3595.0], [61.9, 3595.0], [62.0, 3595.0], [62.1, 3596.0], [62.2, 3596.0], [62.3, 3597.0], [62.4, 3598.0], [62.5, 3598.0], [62.6, 3600.0], [62.7, 3600.0], [62.8, 3601.0], [62.9, 3601.0], [63.0, 3602.0], [63.1, 3603.0], [63.2, 3607.0], [63.3, 3608.0], [63.4, 3610.0], [63.5, 3610.0], [63.6, 3610.0], [63.7, 3611.0], [63.8, 3612.0], [63.9, 3613.0], [64.0, 3615.0], [64.1, 3615.0], [64.2, 3617.0], [64.3, 3620.0], [64.4, 3628.0], [64.5, 3628.0], [64.6, 3628.0], [64.7, 3628.0], [64.8, 3629.0], [64.9, 3629.0], [65.0, 3629.0], [65.1, 3629.0], [65.2, 3629.0], [65.3, 3629.0], [65.4, 3630.0], [65.5, 3630.0], [65.6, 3631.0], [65.7, 3631.0], [65.8, 3631.0], [65.9, 3631.0], [66.0, 3631.0], [66.1, 3632.0], [66.2, 3633.0], [66.3, 3633.0], [66.4, 3633.0], [66.5, 3633.0], [66.6, 3633.0], [66.7, 3634.0], [66.8, 3634.0], [66.9, 3634.0], [67.0, 3634.0], [67.1, 3634.0], [67.2, 3634.0], [67.3, 3634.0], [67.4, 3635.0], [67.5, 3635.0], [67.6, 3635.0], [67.7, 3635.0], [67.8, 3635.0], [67.9, 3636.0], [68.0, 3636.0], [68.1, 3636.0], [68.2, 3636.0], [68.3, 3636.0], [68.4, 3637.0], [68.5, 3637.0], [68.6, 3638.0], [68.7, 3638.0], [68.8, 3638.0], [68.9, 3638.0], [69.0, 3640.0], [69.1, 3640.0], [69.2, 3640.0], [69.3, 3640.0], [69.4, 3640.0], [69.5, 3640.0], [69.6, 3640.0], [69.7, 3640.0], [69.8, 3640.0], [69.9, 3640.0], [70.0, 3641.0], [70.1, 3641.0], [70.2, 3641.0], [70.3, 3642.0], [70.4, 3642.0], [70.5, 3642.0], [70.6, 3642.0], [70.7, 3642.0], [70.8, 3642.0], [70.9, 3643.0], [71.0, 3643.0], [71.1, 3643.0], [71.2, 3643.0], [71.3, 3644.0], [71.4, 3644.0], [71.5, 3644.0], [71.6, 3644.0], [71.7, 3645.0], [71.8, 3645.0], [71.9, 3648.0], [72.0, 3648.0], [72.1, 3648.0], [72.2, 3648.0], [72.3, 3648.0], [72.4, 3649.0], [72.5, 3649.0], [72.6, 3649.0], [72.7, 3649.0], [72.8, 3649.0], [72.9, 3649.0], [73.0, 3649.0], [73.1, 3650.0], [73.2, 3650.0], [73.3, 3650.0], [73.4, 3651.0], [73.5, 3651.0], [73.6, 3652.0], [73.7, 3653.0], [73.8, 3653.0], [73.9, 3653.0], [74.0, 3653.0], [74.1, 3654.0], [74.2, 3654.0], [74.3, 3654.0], [74.4, 3654.0], [74.5, 3654.0], [74.6, 3654.0], [74.7, 3654.0], [74.8, 3654.0], [74.9, 3654.0], [75.0, 3655.0], [75.1, 3655.0], [75.2, 3655.0], [75.3, 3655.0], [75.4, 3655.0], [75.5, 3656.0], [75.6, 3656.0], [75.7, 3656.0], [75.8, 3657.0], [75.9, 3657.0], [76.0, 3658.0], [76.1, 3658.0], [76.2, 3658.0], [76.3, 3659.0], [76.4, 3659.0], [76.5, 3659.0], [76.6, 3659.0], [76.7, 3661.0], [76.8, 3661.0], [76.9, 3661.0], [77.0, 3661.0], [77.1, 3661.0], [77.2, 3662.0], [77.3, 3662.0], [77.4, 3663.0], [77.5, 3663.0], [77.6, 3665.0], [77.7, 3666.0], [77.8, 3666.0], [77.9, 3666.0], [78.0, 3667.0], [78.1, 3668.0], [78.2, 3668.0], [78.3, 3668.0], [78.4, 3669.0], [78.5, 3669.0], [78.6, 3670.0], [78.7, 3671.0], [78.8, 3672.0], [78.9, 3672.0], [79.0, 3673.0], [79.1, 3674.0], [79.2, 3674.0], [79.3, 3675.0], [79.4, 3675.0], [79.5, 3675.0], [79.6, 3675.0], [79.7, 3675.0], [79.8, 3676.0], [79.9, 3676.0], [80.0, 3676.0], [80.1, 3676.0], [80.2, 3677.0], [80.3, 3677.0], [80.4, 3679.0], [80.5, 3679.0], [80.6, 3679.0], [80.7, 3679.0], [80.8, 3680.0], [80.9, 3681.0], [81.0, 3682.0], [81.1, 3683.0], [81.2, 3683.0], [81.3, 3683.0], [81.4, 3683.0], [81.5, 3685.0], [81.6, 3685.0], [81.7, 3686.0], [81.8, 3686.0], [81.9, 3687.0], [82.0, 3688.0], [82.1, 3688.0], [82.2, 3688.0], [82.3, 3688.0], [82.4, 3689.0], [82.5, 3689.0], [82.6, 3690.0], [82.7, 3690.0], [82.8, 3691.0], [82.9, 3691.0], [83.0, 3691.0], [83.1, 3691.0], [83.2, 3692.0], [83.3, 3692.0], [83.4, 3692.0], [83.5, 3693.0], [83.6, 3693.0], [83.7, 3695.0], [83.8, 3695.0], [83.9, 3695.0], [84.0, 3695.0], [84.1, 3696.0], [84.2, 3696.0], [84.3, 3696.0], [84.4, 3696.0], [84.5, 3697.0], [84.6, 3697.0], [84.7, 3698.0], [84.8, 3698.0], [84.9, 3698.0], [85.0, 3700.0], [85.1, 3700.0], [85.2, 3700.0], [85.3, 3701.0], [85.4, 3702.0], [85.5, 3702.0], [85.6, 3703.0], [85.7, 3703.0], [85.8, 3704.0], [85.9, 3705.0], [86.0, 3705.0], [86.1, 3705.0], [86.2, 3706.0], [86.3, 3706.0], [86.4, 3706.0], [86.5, 3706.0], [86.6, 3706.0], [86.7, 3707.0], [86.8, 3707.0], [86.9, 3707.0], [87.0, 3707.0], [87.1, 3708.0], [87.2, 3709.0], [87.3, 3710.0], [87.4, 3710.0], [87.5, 3711.0], [87.6, 3711.0], [87.7, 3711.0], [87.8, 3713.0], [87.9, 3714.0], [88.0, 3714.0], [88.1, 3716.0], [88.2, 3716.0], [88.3, 3717.0], [88.4, 3718.0], [88.5, 3718.0], [88.6, 3719.0], [88.7, 3719.0], [88.8, 3719.0], [88.9, 3719.0], [89.0, 3720.0], [89.1, 3720.0], [89.2, 3720.0], [89.3, 3721.0], [89.4, 3722.0], [89.5, 3723.0], [89.6, 3725.0], [89.7, 3728.0], [89.8, 3728.0], [89.9, 3730.0], [90.0, 3731.0], [90.1, 3731.0], [90.2, 3732.0], [90.3, 3733.0], [90.4, 3736.0], [90.5, 3737.0], [90.6, 3738.0], [90.7, 3739.0], [90.8, 3739.0], [90.9, 3739.0], [91.0, 3745.0], [91.1, 3745.0], [91.2, 3746.0], [91.3, 3750.0], [91.4, 3750.0], [91.5, 3750.0], [91.6, 3751.0], [91.7, 3752.0], [91.8, 3753.0], [91.9, 3754.0], [92.0, 3755.0], [92.1, 3755.0], [92.2, 3755.0], [92.3, 3756.0], [92.4, 3756.0], [92.5, 3757.0], [92.6, 3758.0], [92.7, 3758.0], [92.8, 3759.0], [92.9, 3759.0], [93.0, 3760.0], [93.1, 3760.0], [93.2, 3764.0], [93.3, 3764.0], [93.4, 3765.0], [93.5, 3765.0], [93.6, 3768.0], [93.7, 3769.0], [93.8, 3770.0], [93.9, 3772.0], [94.0, 3774.0], [94.1, 3775.0], [94.2, 3778.0], [94.3, 3781.0], [94.4, 3781.0], [94.5, 3781.0], [94.6, 3782.0], [94.7, 3783.0], [94.8, 3784.0], [94.9, 3785.0], [95.0, 3786.0], [95.1, 3786.0], [95.2, 3789.0], [95.3, 3790.0], [95.4, 3791.0], [95.5, 3796.0], [95.6, 3796.0], [95.7, 3797.0], [95.8, 3797.0], [95.9, 3797.0], [96.0, 3798.0], [96.1, 3800.0], [96.2, 3801.0], [96.3, 3801.0], [96.4, 3802.0], [96.5, 3804.0], [96.6, 3804.0], [96.7, 3805.0], [96.8, 3805.0], [96.9, 3814.0], [97.0, 3814.0], [97.1, 3814.0], [97.2, 3814.0], [97.3, 3814.0], [97.4, 3817.0], [97.5, 3818.0], [97.6, 3822.0], [97.7, 3823.0], [97.8, 3823.0], [97.9, 3828.0], [98.0, 3828.0], [98.1, 3836.0], [98.2, 3836.0], [98.3, 3837.0], [98.4, 3837.0], [98.5, 3838.0], [98.6, 3838.0], [98.7, 3839.0], [98.8, 3840.0], [98.9, 3841.0], [99.0, 3841.0], [99.1, 3841.0], [99.2, 3842.0], [99.3, 3844.0], [99.4, 3848.0], [99.5, 3859.0], [99.6, 3859.0], [99.7, 3861.0], [99.8, 3867.0], [99.9, 6774.0], [100.0, 6774.0]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[0.0, 513.0], [0.1, 513.0], [0.2, 516.0], [0.3, 6212.0], [0.4, 6216.0], [0.5, 6216.0], [0.6, 6216.0], [0.7, 6262.0], [0.8, 6299.0], [0.9, 6299.0], [1.0, 6339.0], [1.1, 6357.0], [1.2, 6358.0], [1.3, 6384.0], [1.4, 6384.0], [1.5, 6394.0], [1.6, 6400.0], [1.7, 6413.0], [1.8, 6413.0], [1.9, 6438.0], [2.0, 6467.0], [2.1, 6499.0], [2.2, 6499.0], [2.3, 6521.0], [2.4, 6525.0], [2.5, 6533.0], [2.6, 6538.0], [2.7, 6538.0], [2.8, 6554.0], [2.9, 6560.0], [3.0, 6561.0], [3.1, 6561.0], [3.2, 6567.0], [3.3, 6577.0], [3.4, 6585.0], [3.5, 6585.0], [3.6, 6588.0], [3.7, 6588.0], [3.8, 6589.0], [3.9, 6591.0], [4.0, 6591.0], [4.1, 6592.0], [4.2, 6594.0], [4.3, 6596.0], [4.4, 6596.0], [4.5, 6597.0], [4.6, 6603.0], [4.7, 6604.0], [4.8, 6604.0], [4.9, 6604.0], [5.0, 6604.0], [5.1, 6606.0], [5.2, 6608.0], [5.3, 6608.0], [5.4, 6608.0], [5.5, 6609.0], [5.6, 6610.0], [5.7, 6610.0], [5.8, 6613.0], [5.9, 6614.0], [6.0, 6616.0], [6.1, 6616.0], [6.2, 6617.0], [6.3, 6618.0], [6.4, 6618.0], [6.5, 6618.0], [6.6, 6618.0], [6.7, 6618.0], [6.8, 6619.0], [6.9, 6619.0], [7.0, 6619.0], [7.1, 6619.0], [7.2, 6620.0], [7.3, 6621.0], [7.4, 6621.0], [7.5, 6621.0], [7.6, 6621.0], [7.7, 6622.0], [7.8, 6622.0], [7.9, 6622.0], [8.0, 6623.0], [8.1, 6624.0], [8.2, 6625.0], [8.3, 6625.0], [8.4, 6625.0], [8.5, 6625.0], [8.6, 6625.0], [8.7, 6625.0], [8.8, 6626.0], [8.9, 6626.0], [9.0, 6626.0], [9.1, 6627.0], [9.2, 6627.0], [9.3, 6627.0], [9.4, 6627.0], [9.5, 6627.0], [9.6, 6627.0], [9.7, 6627.0], [9.8, 6627.0], [9.9, 6628.0], [10.0, 6628.0], [10.1, 6628.0], [10.2, 6628.0], [10.3, 6628.0], [10.4, 6629.0], [10.5, 6629.0], [10.6, 6629.0], [10.7, 6629.0], [10.8, 6630.0], [10.9, 6630.0], [11.0, 6630.0], [11.1, 6630.0], [11.2, 6630.0], [11.3, 6630.0], [11.4, 6630.0], [11.5, 6631.0], [11.6, 6631.0], [11.7, 6631.0], [11.8, 6631.0], [11.9, 6631.0], [12.0, 6631.0], [12.1, 6631.0], [12.2, 6631.0], [12.3, 6632.0], [12.4, 6632.0], [12.5, 6632.0], [12.6, 6632.0], [12.7, 6632.0], [12.8, 6632.0], [12.9, 6632.0], [13.0, 6632.0], [13.1, 6632.0], [13.2, 6633.0], [13.3, 6633.0], [13.4, 6633.0], [13.5, 6633.0], [13.6, 6633.0], [13.7, 6633.0], [13.8, 6633.0], [13.9, 6633.0], [14.0, 6633.0], [14.1, 6634.0], [14.2, 6634.0], [14.3, 6634.0], [14.4, 6634.0], [14.5, 6634.0], [14.6, 6634.0], [14.7, 6634.0], [14.8, 6634.0], [14.9, 6634.0], [15.0, 6634.0], [15.1, 6635.0], [15.2, 6635.0], [15.3, 6635.0], [15.4, 6635.0], [15.5, 6635.0], [15.6, 6635.0], [15.7, 6635.0], [15.8, 6636.0], [15.9, 6636.0], [16.0, 6637.0], [16.1, 6637.0], [16.2, 6637.0], [16.3, 6637.0], [16.4, 6637.0], [16.5, 6637.0], [16.6, 6637.0], [16.7, 6638.0], [16.8, 6638.0], [16.9, 6638.0], [17.0, 6638.0], [17.1, 6638.0], [17.2, 6638.0], [17.3, 6639.0], [17.4, 6639.0], [17.5, 6639.0], [17.6, 6639.0], [17.7, 6639.0], [17.8, 6639.0], [17.9, 6639.0], [18.0, 6640.0], [18.1, 6640.0], [18.2, 6640.0], [18.3, 6640.0], [18.4, 6640.0], [18.5, 6640.0], [18.6, 6640.0], [18.7, 6640.0], [18.8, 6641.0], [18.9, 6641.0], [19.0, 6641.0], [19.1, 6641.0], [19.2, 6641.0], [19.3, 6641.0], [19.4, 6641.0], [19.5, 6641.0], [19.6, 6641.0], [19.7, 6642.0], [19.8, 6642.0], [19.9, 6642.0], [20.0, 6642.0], [20.1, 6642.0], [20.2, 6642.0], [20.3, 6642.0], [20.4, 6642.0], [20.5, 6642.0], [20.6, 6642.0], [20.7, 6642.0], [20.8, 6642.0], [20.9, 6642.0], [21.0, 6643.0], [21.1, 6643.0], [21.2, 6643.0], [21.3, 6643.0], [21.4, 6643.0], [21.5, 6643.0], [21.6, 6644.0], [21.7, 6644.0], [21.8, 6644.0], [21.9, 6644.0], [22.0, 6644.0], [22.1, 6644.0], [22.2, 6644.0], [22.3, 6645.0], [22.4, 6645.0], [22.5, 6645.0], [22.6, 6645.0], [22.7, 6645.0], [22.8, 6645.0], [22.9, 6645.0], [23.0, 6645.0], [23.1, 6645.0], [23.2, 6645.0], [23.3, 6645.0], [23.4, 6645.0], [23.5, 6645.0], [23.6, 6646.0], [23.7, 6646.0], [23.8, 6646.0], [23.9, 6647.0], [24.0, 6647.0], [24.1, 6647.0], [24.2, 6647.0], [24.3, 6647.0], [24.4, 6647.0], [24.5, 6647.0], [24.6, 6647.0], [24.7, 6647.0], [24.8, 6647.0], [24.9, 6647.0], [25.0, 6647.0], [25.1, 6647.0], [25.2, 6648.0], [25.3, 6648.0], [25.4, 6648.0], [25.5, 6648.0], [25.6, 6648.0], [25.7, 6648.0], [25.8, 6648.0], [25.9, 6648.0], [26.0, 6648.0], [26.1, 6648.0], [26.2, 6648.0], [26.3, 6648.0], [26.4, 6649.0], [26.5, 6649.0], [26.6, 6649.0], [26.7, 6649.0], [26.8, 6650.0], [26.9, 6650.0], [27.0, 6650.0], [27.1, 6650.0], [27.2, 6650.0], [27.3, 6650.0], [27.4, 6650.0], [27.5, 6650.0], [27.6, 6650.0], [27.7, 6650.0], [27.8, 6650.0], [27.9, 6650.0], [28.0, 6650.0], [28.1, 6650.0], [28.2, 6651.0], [28.3, 6651.0], [28.4, 6651.0], [28.5, 6651.0], [28.6, 6651.0], [28.7, 6651.0], [28.8, 6652.0], [28.9, 6652.0], [29.0, 6652.0], [29.1, 6652.0], [29.2, 6652.0], [29.3, 6652.0], [29.4, 6653.0], [29.5, 6653.0], [29.6, 6653.0], [29.7, 6654.0], [29.8, 6654.0], [29.9, 6654.0], [30.0, 6654.0], [30.1, 6654.0], [30.2, 6654.0], [30.3, 6654.0], [30.4, 6655.0], [30.5, 6655.0], [30.6, 6655.0], [30.7, 6655.0], [30.8, 6655.0], [30.9, 6655.0], [31.0, 6655.0], [31.1, 6655.0], [31.2, 6656.0], [31.3, 6656.0], [31.4, 6656.0], [31.5, 6656.0], [31.6, 6656.0], [31.7, 6656.0], [31.8, 6656.0], [31.9, 6656.0], [32.0, 6656.0], [32.1, 6656.0], [32.2, 6656.0], [32.3, 6656.0], [32.4, 6657.0], [32.5, 6657.0], [32.6, 6657.0], [32.7, 6657.0], [32.8, 6658.0], [32.9, 6658.0], [33.0, 6658.0], [33.1, 6658.0], [33.2, 6658.0], [33.3, 6659.0], [33.4, 6659.0], [33.5, 6659.0], [33.6, 6659.0], [33.7, 6659.0], [33.8, 6659.0], [33.9, 6659.0], [34.0, 6659.0], [34.1, 6659.0], [34.2, 6660.0], [34.3, 6660.0], [34.4, 6660.0], [34.5, 6660.0], [34.6, 6660.0], [34.7, 6660.0], [34.8, 6660.0], [34.9, 6660.0], [35.0, 6660.0], [35.1, 6661.0], [35.2, 6661.0], [35.3, 6661.0], [35.4, 6661.0], [35.5, 6661.0], [35.6, 6661.0], [35.7, 6661.0], [35.8, 6662.0], [35.9, 6662.0], [36.0, 6662.0], [36.1, 6662.0], [36.2, 6662.0], [36.3, 6662.0], [36.4, 6662.0], [36.5, 6662.0], [36.6, 6662.0], [36.7, 6662.0], [36.8, 6663.0], [36.9, 6664.0], [37.0, 6664.0], [37.1, 6664.0], [37.2, 6664.0], [37.3, 6664.0], [37.4, 6664.0], [37.5, 6664.0], [37.6, 6665.0], [37.7, 6665.0], [37.8, 6665.0], [37.9, 6665.0], [38.0, 6665.0], [38.1, 6666.0], [38.2, 6666.0], [38.3, 6666.0], [38.4, 6666.0], [38.5, 6666.0], [38.6, 6667.0], [38.7, 6667.0], [38.8, 6667.0], [38.9, 6667.0], [39.0, 6668.0], [39.1, 6668.0], [39.2, 6668.0], [39.3, 6668.0], [39.4, 6668.0], [39.5, 6668.0], [39.6, 6668.0], [39.7, 6668.0], [39.8, 6668.0], [39.9, 6668.0], [40.0, 6668.0], [40.1, 6668.0], [40.2, 6669.0], [40.3, 6669.0], [40.4, 6669.0], [40.5, 6669.0], [40.6, 6669.0], [40.7, 6669.0], [40.8, 6669.0], [40.9, 6669.0], [41.0, 6669.0], [41.1, 6669.0], [41.2, 6669.0], [41.3, 6669.0], [41.4, 6669.0], [41.5, 6669.0], [41.6, 6670.0], [41.7, 6670.0], [41.8, 6670.0], [41.9, 6670.0], [42.0, 6670.0], [42.1, 6670.0], [42.2, 6670.0], [42.3, 6670.0], [42.4, 6670.0], [42.5, 6671.0], [42.6, 6671.0], [42.7, 6671.0], [42.8, 6671.0], [42.9, 6671.0], [43.0, 6671.0], [43.1, 6671.0], [43.2, 6671.0], [43.3, 6671.0], [43.4, 6672.0], [43.5, 6672.0], [43.6, 6672.0], [43.7, 6672.0], [43.8, 6673.0], [43.9, 6673.0], [44.0, 6673.0], [44.1, 6674.0], [44.2, 6674.0], [44.3, 6674.0], [44.4, 6674.0], [44.5, 6674.0], [44.6, 6675.0], [44.7, 6675.0], [44.8, 6675.0], [44.9, 6676.0], [45.0, 6676.0], [45.1, 6676.0], [45.2, 6676.0], [45.3, 6676.0], [45.4, 6677.0], [45.5, 6677.0], [45.6, 6678.0], [45.7, 6678.0], [45.8, 6678.0], [45.9, 6678.0], [46.0, 6680.0], [46.1, 6680.0], [46.2, 6680.0], [46.3, 6680.0], [46.4, 6680.0], [46.5, 6680.0], [46.6, 6680.0], [46.7, 6680.0], [46.8, 6681.0], [46.9, 6681.0], [47.0, 6681.0], [47.1, 6681.0], [47.2, 6681.0], [47.3, 6682.0], [47.4, 6682.0], [47.5, 6683.0], [47.6, 6683.0], [47.7, 6683.0], [47.8, 6683.0], [47.9, 6683.0], [48.0, 6683.0], [48.1, 6683.0], [48.2, 6683.0], [48.3, 6683.0], [48.4, 6684.0], [48.5, 6684.0], [48.6, 6684.0], [48.7, 6684.0], [48.8, 6685.0], [48.9, 6685.0], [49.0, 6686.0], [49.1, 6686.0], [49.2, 6686.0], [49.3, 6686.0], [49.4, 6686.0], [49.5, 6688.0], [49.6, 6688.0], [49.7, 6688.0], [49.8, 6688.0], [49.9, 6689.0], [50.0, 6689.0], [50.1, 6689.0], [50.2, 6690.0], [50.3, 6691.0], [50.4, 6691.0], [50.5, 6691.0], [50.6, 6692.0], [50.7, 6692.0], [50.8, 6693.0], [50.9, 6693.0], [51.0, 6693.0], [51.1, 6694.0], [51.2, 6695.0], [51.3, 6695.0], [51.4, 6695.0], [51.5, 6695.0], [51.6, 6696.0], [51.7, 6696.0], [51.8, 6696.0], [51.9, 6696.0], [52.0, 6701.0], [52.1, 6701.0], [52.2, 6701.0], [52.3, 6701.0], [52.4, 6707.0], [52.5, 6709.0], [52.6, 6709.0], [52.7, 6709.0], [52.8, 6711.0], [52.9, 6711.0], [53.0, 6711.0], [53.1, 6711.0], [53.2, 6712.0], [53.3, 6712.0], [53.4, 6712.0], [53.5, 6712.0], [53.6, 6712.0], [53.7, 6712.0], [53.8, 6712.0], [53.9, 6713.0], [54.0, 6713.0], [54.1, 6713.0], [54.2, 6713.0], [54.3, 6714.0], [54.4, 6714.0], [54.5, 6714.0], [54.6, 6714.0], [54.7, 6715.0], [54.8, 6715.0], [54.9, 6715.0], [55.0, 6715.0], [55.1, 6715.0], [55.2, 6717.0], [55.3, 6717.0], [55.4, 6717.0], [55.5, 6718.0], [55.6, 6719.0], [55.7, 6719.0], [55.8, 6719.0], [55.9, 6719.0], [56.0, 6719.0], [56.1, 6719.0], [56.2, 6719.0], [56.3, 6720.0], [56.4, 6720.0], [56.5, 6721.0], [56.6, 6721.0], [56.7, 6721.0], [56.8, 6722.0], [56.9, 6722.0], [57.0, 6722.0], [57.1, 6722.0], [57.2, 6722.0], [57.3, 6722.0], [57.4, 6722.0], [57.5, 6723.0], [57.6, 6723.0], [57.7, 6724.0], [57.8, 6726.0], [57.9, 6726.0], [58.0, 6726.0], [58.1, 6727.0], [58.2, 6728.0], [58.3, 6728.0], [58.4, 6728.0], [58.5, 6728.0], [58.6, 6729.0], [58.7, 6729.0], [58.8, 6729.0], [58.9, 6729.0], [59.0, 6729.0], [59.1, 6729.0], [59.2, 6729.0], [59.3, 6730.0], [59.4, 6730.0], [59.5, 6731.0], [59.6, 6731.0], [59.7, 6731.0], [59.8, 6731.0], [59.9, 6731.0], [60.0, 6731.0], [60.1, 6731.0], [60.2, 6732.0], [60.3, 6732.0], [60.4, 6732.0], [60.5, 6732.0], [60.6, 6732.0], [60.7, 6732.0], [60.8, 6733.0], [60.9, 6733.0], [61.0, 6734.0], [61.1, 6734.0], [61.2, 6734.0], [61.3, 6735.0], [61.4, 6735.0], [61.5, 6735.0], [61.6, 6735.0], [61.7, 6735.0], [61.8, 6735.0], [61.9, 6735.0], [62.0, 6735.0], [62.1, 6736.0], [62.2, 6736.0], [62.3, 6736.0], [62.4, 6737.0], [62.5, 6737.0], [62.6, 6737.0], [62.7, 6737.0], [62.8, 6737.0], [62.9, 6737.0], [63.0, 6737.0], [63.1, 6737.0], [63.2, 6737.0], [63.3, 6738.0], [63.4, 6738.0], [63.5, 6738.0], [63.6, 6740.0], [63.7, 6740.0], [63.8, 6744.0], [63.9, 6745.0], [64.0, 6745.0], [64.1, 6746.0], [64.2, 6746.0], [64.3, 6750.0], [64.4, 6750.0], [64.5, 6751.0], [64.6, 6752.0], [64.7, 6754.0], [64.8, 6754.0], [64.9, 6758.0], [65.0, 6760.0], [65.1, 6762.0], [65.2, 6763.0], [65.3, 6763.0], [65.4, 6765.0], [65.5, 6765.0], [65.6, 6766.0], [65.7, 6766.0], [65.8, 6767.0], [65.9, 6771.0], [66.0, 6774.0], [66.1, 6774.0], [66.2, 6775.0], [66.3, 6776.0], [66.4, 6776.0], [66.5, 6777.0], [66.6, 6777.0], [66.7, 6779.0], [66.8, 6780.0], [66.9, 6782.0], [67.0, 6782.0], [67.1, 6783.0], [67.2, 6785.0], [67.3, 6788.0], [67.4, 6788.0], [67.5, 6788.0], [67.6, 6794.0], [67.7, 6795.0], [67.8, 6796.0], [67.9, 6796.0], [68.0, 6800.0], [68.1, 6803.0], [68.2, 6805.0], [68.3, 6805.0], [68.4, 6805.0], [68.5, 6806.0], [68.6, 6808.0], [68.7, 6808.0], [68.8, 6808.0], [68.9, 6809.0], [69.0, 6809.0], [69.1, 6810.0], [69.2, 6810.0], [69.3, 6811.0], [69.4, 6812.0], [69.5, 6812.0], [69.6, 6812.0], [69.7, 6812.0], [69.8, 6815.0], [69.9, 6816.0], [70.0, 6818.0], [70.1, 6818.0], [70.2, 6818.0], [70.3, 6830.0], [70.4, 6836.0], [70.5, 6836.0], [70.6, 6837.0], [70.7, 6837.0], [70.8, 6837.0], [70.9, 6837.0], [71.0, 6839.0], [71.1, 6879.0], [71.2, 6880.0], [71.3, 6880.0], [71.4, 6880.0], [71.5, 6880.0], [71.6, 6882.0], [71.7, 6882.0], [71.8, 6882.0], [71.9, 6883.0], [72.0, 6883.0], [72.1, 6883.0], [72.2, 6883.0], [72.3, 6883.0], [72.4, 6883.0], [72.5, 6884.0], [72.6, 6887.0], [72.7, 6887.0], [72.8, 6888.0], [72.9, 6890.0], [73.0, 6890.0], [73.1, 6890.0], [73.2, 6891.0], [73.3, 6891.0], [73.4, 6891.0], [73.5, 6891.0], [73.6, 6891.0], [73.7, 6891.0], [73.8, 6891.0], [73.9, 6892.0], [74.0, 6892.0], [74.1, 6892.0], [74.2, 6893.0], [74.3, 6894.0], [74.4, 6894.0], [74.5, 6894.0], [74.6, 6895.0], [74.7, 6895.0], [74.8, 6895.0], [74.9, 6895.0], [75.0, 6896.0], [75.1, 6896.0], [75.2, 6897.0], [75.3, 6897.0], [75.4, 6899.0], [75.5, 6903.0], [75.6, 6903.0], [75.7, 6903.0], [75.8, 6909.0], [75.9, 6909.0], [76.0, 6913.0], [76.1, 6913.0], [76.2, 6923.0], [76.3, 6924.0], [76.4, 6925.0], [76.5, 6928.0], [76.6, 6928.0], [76.7, 6929.0], [76.8, 6930.0], [76.9, 6930.0], [77.0, 6930.0], [77.1, 6931.0], [77.2, 6933.0], [77.3, 6934.0], [77.4, 6934.0], [77.5, 6936.0], [77.6, 6936.0], [77.7, 6937.0], [77.8, 6939.0], [77.9, 6939.0], [78.0, 6939.0], [78.1, 6940.0], [78.2, 6941.0], [78.3, 6941.0], [78.4, 6941.0], [78.5, 6941.0], [78.6, 6942.0], [78.7, 6942.0], [78.8, 6942.0], [78.9, 6942.0], [79.0, 6942.0], [79.1, 6942.0], [79.2, 6942.0], [79.3, 6942.0], [79.4, 6943.0], [79.5, 6943.0], [79.6, 6943.0], [79.7, 6943.0], [79.8, 6943.0], [79.9, 6944.0], [80.0, 6944.0], [80.1, 6944.0], [80.2, 6944.0], [80.3, 6944.0], [80.4, 6950.0], [80.5, 6950.0], [80.6, 6952.0], [80.7, 6954.0], [80.8, 6954.0], [80.9, 6954.0], [81.0, 6954.0], [81.1, 6955.0], [81.2, 6956.0], [81.3, 6957.0], [81.4, 6957.0], [81.5, 6958.0], [81.6, 6961.0], [81.7, 6964.0], [81.8, 6964.0], [81.9, 6966.0], [82.0, 6967.0], [82.1, 6970.0], [82.2, 6970.0], [82.3, 6972.0], [82.4, 6976.0], [82.5, 6979.0], [82.6, 6981.0], [82.7, 6981.0], [82.8, 6989.0], [82.9, 6989.0], [83.0, 6995.0], [83.1, 6995.0], [83.2, 6997.0], [83.3, 7003.0], [83.4, 7004.0], [83.5, 7004.0], [83.6, 7005.0], [83.7, 7006.0], [83.8, 7015.0], [83.9, 7016.0], [84.0, 7016.0], [84.1, 7016.0], [84.2, 7021.0], [84.3, 7023.0], [84.4, 7023.0], [84.5, 7023.0], [84.6, 7025.0], [84.7, 7027.0], [84.8, 7027.0], [84.9, 7028.0], [85.0, 7030.0], [85.1, 7037.0], [85.2, 7039.0], [85.3, 7039.0], [85.4, 7045.0], [85.5, 7047.0], [85.6, 7056.0], [85.7, 7056.0], [85.8, 7057.0], [85.9, 7058.0], [86.0, 7058.0], [86.1, 7058.0], [86.2, 7058.0], [86.3, 7059.0], [86.4, 7061.0], [86.5, 7062.0], [86.6, 7062.0], [86.7, 7062.0], [86.8, 7063.0], [86.9, 7063.0], [87.0, 7063.0], [87.1, 7068.0], [87.2, 7072.0], [87.3, 7085.0], [87.4, 7085.0], [87.5, 7085.0], [87.6, 7085.0], [87.7, 7086.0], [87.8, 7090.0], [87.9, 7090.0], [88.0, 7090.0], [88.1, 7090.0], [88.2, 7091.0], [88.3, 7091.0], [88.4, 7097.0], [88.5, 7099.0], [88.6, 7101.0], [88.7, 7101.0], [88.8, 7102.0], [88.9, 7102.0], [89.0, 7104.0], [89.1, 7110.0], [89.2, 7110.0], [89.3, 7112.0], [89.4, 7113.0], [89.5, 7113.0], [89.6, 7113.0], [89.7, 7113.0], [89.8, 7119.0], [89.9, 7119.0], [90.0, 7120.0], [90.1, 7120.0], [90.2, 7121.0], [90.3, 7122.0], [90.4, 7123.0], [90.5, 7123.0], [90.6, 7123.0], [90.7, 7125.0], [90.8, 7127.0], [90.9, 7127.0], [91.0, 7131.0], [91.1, 7135.0], [91.2, 7135.0], [91.3, 7136.0], [91.4, 7136.0], [91.5, 7137.0], [91.6, 7137.0], [91.7, 7145.0], [91.8, 7145.0], [91.9, 7149.0], [92.0, 7154.0], [92.1, 7155.0], [92.2, 7155.0], [92.3, 7155.0], [92.4, 7156.0], [92.5, 7156.0], [92.6, 7159.0], [92.7, 7159.0], [92.8, 7159.0], [92.9, 7160.0], [93.0, 7161.0], [93.1, 7161.0], [93.2, 7161.0], [93.3, 7161.0], [93.4, 7170.0], [93.5, 7170.0], [93.6, 7174.0], [93.7, 7175.0], [93.8, 7189.0], [93.9, 7193.0], [94.0, 7193.0], [94.1, 7193.0], [94.2, 7198.0], [94.3, 7211.0], [94.4, 7211.0], [94.5, 7216.0], [94.6, 7241.0], [94.7, 7242.0], [94.8, 7242.0], [94.9, 7244.0], [95.0, 7248.0], [95.1, 7249.0], [95.2, 7251.0], [95.3, 7251.0], [95.4, 7251.0], [95.5, 7252.0], [95.6, 7252.0], [95.7, 7252.0], [95.8, 7253.0], [95.9, 7254.0], [96.0, 7257.0], [96.1, 7257.0], [96.2, 7258.0], [96.3, 7262.0], [96.4, 7262.0], [96.5, 7262.0], [96.6, 7262.0], [96.7, 7263.0], [96.8, 7263.0], [96.9, 7271.0], [97.0, 7271.0], [97.1, 7276.0], [97.2, 7280.0], [97.3, 7282.0], [97.4, 7282.0], [97.5, 7299.0], [97.6, 7305.0], [97.7, 7310.0], [97.8, 7330.0], [97.9, 7330.0], [98.0, 7350.0], [98.1, 7368.0], [98.2, 7368.0], [98.3, 7368.0], [98.4, 7369.0], [98.5, 7372.0], [98.6, 7376.0], [98.7, 7376.0], [98.8, 7376.0], [98.9, 7377.0], [99.0, 7378.0], [99.1, 7382.0], [99.2, 7382.0], [99.3, 7382.0], [99.4, 7384.0], [99.5, 7385.0], [99.6, 7385.0], [99.7, 7388.0], [99.8, 7395.0], [99.9, 7435.0]], "isOverall": false, "label": "有redis", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 365.0, "series": [{"data": [[3100.0, 2.0], [3300.0, 95.0], [3200.0, 58.0], [3400.0, 124.0], [6700.0, 2.0], [3500.0, 348.0], [3600.0, 224.0], [3700.0, 111.0], [3800.0, 38.0]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[6200.0, 5.0], [6300.0, 5.0], [6600.0, 365.0], [6500.0, 18.0], [6400.0, 5.0], [6700.0, 123.0], [6800.0, 58.0], [6900.0, 60.0], [7100.0, 44.0], [7000.0, 41.0], [7200.0, 25.0], [7300.0, 18.0], [7400.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "有redis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1770.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1770.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.7141873893E12, "maxY": 1000.0, "series": [{"data": [[1.7141873897E12, 1000.0], [1.7141873969E12, 766.8249999999995], [1.7141873895E12, 1000.0], [1.7141873977E12, 543.3664122137405], [1.7141873898E12, 1000.0], [1.7141873893E12, 1000.0], [1.7141873975E12, 570.0], [1.7141873896E12, 1000.0], [1.7141873978E12, 2.0], [1.7141873894E12, 1000.0], [1.7141873907E12, 889.0], [1.7141873976E12, 565.0911680911681]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.7141873978E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 514.5, "minX": 2.0, "maxY": 6893.63143631436, "series": [{"data": [[2.0, 6774.0], [1000.0, 3555.661999999997]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[998.0079840319361, 3562.0858283433104]], "isOverall": false, "label": "无redis-Aggregated", "isController": false}, {"data": [[543.0, 6751.168674698796], [570.0, 6893.63143631436], [544.0, 6707.492957746478], [545.0, 6747.888888888889], [754.0, 6685.666666666667], [755.0, 6650.52380952381], [753.0, 6672.6875], [770.0, 6618.743749999999], [889.0, 514.5]], "isOverall": false, "label": "有redis", "isController": false}, {"data": [[615.1831168831172, 6766.874025974031]], "isOverall": false, "label": "有redis-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6160.0, "minX": 1.7141873893E12, "maxY": 2099830.0, "series": [{"data": [[1.7141873897E12, 1460870.0], [1.7141873969E12, 624180.0], [1.7141873895E12, 280340.0], [1.7141873977E12, 408700.0], [1.7141873898E12, 723570.0], [1.7141873893E12, 18600.0], [1.7141873975E12, 269270.0], [1.7141873896E12, 376910.0], [1.7141873978E12, 6230.0], [1.7141873894E12, 259790.0], [1.7141873907E12, 6160.0], [1.7141873976E12, 1094280.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7141873897E12, 2099830.0], [1.7141873969E12, 909370.0], [1.7141873895E12, 403820.0], [1.7141873977E12, 595570.0], [1.7141873898E12, 1040950.0], [1.7141873893E12, 26910.0], [1.7141873975E12, 391050.0], [1.7141873896E12, 542970.0], [1.7141873978E12, 8980.0], [1.7141873894E12, 372460.0], [1.7141873907E12, 9090.0], [1.7141873976E12, 1596070.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.7141873978E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 514.5, "minX": 1.7141873893E12, "maxY": 7014.220930232559, "series": [{"data": [[1.7141873897E12, 3585.48076923077], [1.7141873895E12, 3382.566666666666], [1.7141873898E12, 3690.6551724137953], [1.7141873893E12, 3285.833333333333], [1.7141873896E12, 3481.553719008264], [1.7141873978E12, 6774.0], [1.7141873894E12, 3325.433734939759]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[1.7141873969E12, 6627.400000000001], [1.7141873977E12, 6732.763358778626], [1.7141873975E12, 7014.220930232559], [1.7141873907E12, 514.5], [1.7141873976E12, 6834.099715099715]], "isOverall": false, "label": "有redis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.7141873978E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 513.5, "minX": 1.7141873893E12, "maxY": 7013.6511627906975, "series": [{"data": [[1.7141873897E12, 3519.886752136751], [1.7141873895E12, 3315.933333333334], [1.7141873898E12, 3595.0991379310335], [1.7141873893E12, 3272.3333333333335], [1.7141873896E12, 3436.9917355371904], [1.7141873978E12, 6772.0], [1.7141873894E12, 3309.10843373494]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[1.7141873969E12, 5802.72], [1.7141873977E12, 6727.603053435115], [1.7141873975E12, 7013.6511627906975], [1.7141873907E12, 513.5], [1.7141873976E12, 6833.290598290597]], "isOverall": false, "label": "有redis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.7141873978E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7141873893E12, "maxY": 2652.1666666666665, "series": [{"data": [[1.7141873897E12, 2574.801282051283], [1.7141873895E12, 2573.4333333333334], [1.7141873898E12, 2593.310344827586], [1.7141873893E12, 2652.1666666666665], [1.7141873896E12, 2583.801652892562], [1.7141873978E12, 0.0], [1.7141873894E12, 2590.542168674698]], "isOverall": false, "label": "无redis", "isController": false}, {"data": [[1.7141873969E12, 0.0], [1.7141873977E12, 0.0], [1.7141873975E12, 0.0], [1.7141873907E12, 0.0], [1.7141873976E12, 0.0]], "isOverall": false, "label": "有redis", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.7141873978E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 513.0, "minX": 1.7141873893E12, "maxY": 7435.0, "series": [{"data": [[1.7141873897E12, 3770.0], [1.7141873969E12, 6728.0], [1.7141873895E12, 3566.0], [1.7141873977E12, 7435.0], [1.7141873898E12, 3867.0], [1.7141873893E12, 3356.0], [1.7141873975E12, 7299.0], [1.7141873896E12, 3666.0], [1.7141873978E12, 6774.0], [1.7141873894E12, 3471.0], [1.7141873907E12, 516.0], [1.7141873976E12, 7395.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7141873897E12, 3485.0], [1.7141873969E12, 6212.0], [1.7141873895E12, 3280.0], [1.7141873977E12, 6633.0], [1.7141873898E12, 3574.0], [1.7141873893E12, 3165.0], [1.7141873975E12, 6805.0], [1.7141873896E12, 3377.0], [1.7141873978E12, 6774.0], [1.7141873894E12, 3225.0], [1.7141873907E12, 513.0], [1.7141873976E12, 6585.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7141873897E12, 3711.0], [1.7141873969E12, 6688.0], [1.7141873895E12, 3510.1], [1.7141873977E12, 6954.8], [1.7141873898E12, 3820.8], [1.7141873893E12, 3356.0], [1.7141873975E12, 7176.8], [1.7141873896E12, 3612.0], [1.7141873978E12, 6774.0], [1.7141873894E12, 3442.6], [1.7141873907E12, 516.0], [1.7141873976E12, 7208.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7141873897E12, 3758.62], [1.7141873969E12, 6718.96], [1.7141873895E12, 3566.0], [1.7141873977E12, 7343.480000000002], [1.7141873898E12, 3860.34], [1.7141873893E12, 3356.0], [1.7141873975E12, 7299.0], [1.7141873896E12, 3664.02], [1.7141873978E12, 6774.0], [1.7141873894E12, 3471.0], [1.7141873907E12, 516.0], [1.7141873976E12, 7384.48]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7141873897E12, 3551.0], [1.7141873969E12, 6651.0], [1.7141873895E12, 3367.5], [1.7141873977E12, 6671.0], [1.7141873898E12, 3653.5], [1.7141873893E12, 3325.5], [1.7141873975E12, 7027.5], [1.7141873896E12, 3465.0], [1.7141873978E12, 6774.0], [1.7141873894E12, 3276.0], [1.7141873907E12, 514.5], [1.7141873976E12, 6731.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7141873897E12, 3734.6499999999996], [1.7141873969E12, 6696.0], [1.7141873895E12, 3537.5], [1.7141873977E12, 6968.4], [1.7141873898E12, 3839.35], [1.7141873893E12, 3356.0], [1.7141873975E12, 7253.65], [1.7141873896E12, 3654.0], [1.7141873978E12, 6774.0], [1.7141873894E12, 3461.0], [1.7141873907E12, 516.0], [1.7141873976E12, 7307.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.7141873978E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 514.5, "minX": 2.0, "maxY": 6737.5, "series": [{"data": [[2.0, 514.5], [570.0, 6737.5], [200.0, 6651.0], [1000.0, 3551.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 513.5, "minX": 2.0, "maxY": 6737.0, "series": [{"data": [[2.0, 513.5], [570.0, 6737.0], [200.0, 5828.0], [1000.0, 3479.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 170.0, "minX": 1.714187386E12, "maxY": 6150.0, "series": [{"data": [[1.714187391E12, 1710.0], [1.7141873905E12, 470.0], [1.7141873862E12, 6150.0], [1.7141873903E12, 540.0], [1.7141873906E12, 170.0], [1.714187386E12, 3050.0], [1.7141873909E12, 1570.0], [1.7141873904E12, 470.0], [1.7141873907E12, 950.0], [1.7141873861E12, 800.0], [1.7141873902E12, 1840.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.714187391E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.7141873893E12, "maxY": 4680.0, "series": [{"data": [[1.7141873897E12, 4680.0], [1.7141873969E12, 2000.0], [1.7141873895E12, 900.0], [1.7141873977E12, 1310.0], [1.7141873898E12, 2320.0], [1.7141873893E12, 60.0], [1.7141873975E12, 860.0], [1.7141873896E12, 1210.0], [1.7141873978E12, 20.0], [1.7141873894E12, 830.0], [1.7141873907E12, 20.0], [1.7141873976E12, 3510.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 100, "maxX": 1.7141873978E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.7141873893E12, "maxY": 4680.0, "series": [{"data": [[1.7141873897E12, 4680.0], [1.7141873895E12, 900.0], [1.7141873898E12, 2320.0], [1.7141873893E12, 60.0], [1.7141873896E12, 1210.0], [1.7141873978E12, 20.0], [1.7141873894E12, 830.0]], "isOverall": false, "label": "无redis-success", "isController": false}, {"data": [[1.7141873969E12, 2000.0], [1.7141873977E12, 1310.0], [1.7141873975E12, 860.0], [1.7141873907E12, 20.0], [1.7141873976E12, 3510.0]], "isOverall": false, "label": "有redis-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.7141873978E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.7141873893E12, "maxY": 4680.0, "series": [{"data": [[1.7141873897E12, 4680.0], [1.7141873969E12, 2000.0], [1.7141873895E12, 900.0], [1.7141873977E12, 1310.0], [1.7141873898E12, 2320.0], [1.7141873893E12, 60.0], [1.7141873975E12, 860.0], [1.7141873896E12, 1210.0], [1.7141873978E12, 20.0], [1.7141873894E12, 830.0], [1.7141873907E12, 20.0], [1.7141873976E12, 3510.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1.7141873978E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

